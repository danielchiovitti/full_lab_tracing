// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package full_lab_cep

import (
	"full_cycle_cep/pkg/core/middleware"
	"full_cycle_cep/pkg/domain/contracts/init_provider"
	"full_cycle_cep/pkg/domain/contracts/viacep"
	"full_cycle_cep/pkg/domain/contracts/weatherapi"
	"full_cycle_cep/pkg/domain/use_cases/viacep/get_viacep"
	"full_cycle_cep/pkg/presentation/http"
	"full_cycle_cep/pkg/presentation/http/cep"
	"full_cycle_cep/pkg/presentation/http/orchestrator"
	"full_cycle_cep/pkg/shared/log"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeHandlers() *http.Handlers {
	loggerManager := log.NewLoggerManager()
	viaCepContract := viacep.NewViaCepContract(loggerManager)
	weatherApiContract := weatherapi.NewWeatherApiContract()
	getViaCepUseCase := get_viacep.NewGetViaCepUseCase(loggerManager, viaCepContract, weatherApiContract)
	initProvider := init_provider.NewInitProvider(loggerManager)
	createCepRoute := cep.NewCreateCepRoute(loggerManager, getViaCepUseCase, initProvider)
	createOrchestratorRoute := orchestrator.NewOrchestratorRoute(loggerManager, initProvider)
	handlers := http.ProvideHandlers(loggerManager, createCepRoute, createOrchestratorRoute)
	return handlers
}

func InitializeProvider() *init_provider.InitProvider {
	loggerManager := log.NewLoggerManager()
	initProvider := init_provider.NewInitProvider(loggerManager)
	return initProvider
}

// wire.go:

var superset = wire.NewSet(wire.Bind(new(log.LoggerManagerInterface), new(*log.LoggerManager)), log.NewLoggerManager, wire.Bind(new(viacep.ViaCepContractInterface), new(*viacep.ViaCepContract)), viacep.NewViaCepContract, wire.Bind(new(weatherapi.WeatherApiContractInterface), new(*weatherapi.WeatherApiContract)), weatherapi.NewWeatherApiContract, wire.Bind(new(get_viacep.GetViaCepUseCaseInterface), new(*get_viacep.GetViaCepUseCase)), get_viacep.NewGetViaCepUseCase, cep.NewCreateCepRoute, middleware.NewCepValidationMiddleware, orchestrator.NewOrchestratorRoute, init_provider.NewInitProvider, http.ProvideHandlers)
